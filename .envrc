strict_env

mkdir -p local/direnv


IFS=$'\n'
local files_to_watch=($(find . -name '*.nix'))
unset IFS
local hashes=$(cat ${files_to_watch[@]} | md5sum | cut -c -32)
local cachedir="local/direnv/$hashes"

trap "rm -rf \"$cachedir\"" ERR

if [ ! -d "$cachedir" ]; then
    # 1. Instantiate the full shell to obtain its shellHook and pin dependencies
    mkdir "$cachedir"
    nix-instantiate --add-root "$cachedir/shell.drv" --indirect shell.nix

    # 2. TODO: Some times only comments or whitespace changes. When the resulting derivation already
    # exists, stop early.

    # 3. Dump a pure nix-shell environment without having run shellHook, but store shellHook
    # so we can run it every time we enter the shell.
    # Notes:
    # - We can't just do text manipulation of shell.drv file to change shellHook
    #   because it becomes an invalid derivation due to inputs not having changed
    #   but outputs have.
    # - Removing shellHook entirely removes dependencies we might need.
    # - But Nix isn't smart enough to detect what's a shell comment and what isn't,
    #   so we evaluate a new derivation with shellHook's contents in the derivation 
    #   being a fully commented out version of the original shellHook. We also need 
    #   escape (or remove, which is what we do) quotes due to Nix string.
    nix-store -qb shellHook "$cachedir/shell.drv" > "$cachedir/shellHook.sh"
    local commentedShellHookNoQuotes=$(sed -e 's|^|#|g' -e 's|"|\\"|g' < "$cachedir/shellHook.sh" | tr '\n' ' ' | tr '"' ' ' | tr "'" ' ')
    local bashEscapedShellHook=$(printf "%q" "$commentedShellHookNoQuotes")

    # The following is a less complicated derivation than shell.nix and should never fail,
    # so we redirect stdout to /dev/null to avoid duplicated output
    nix-instantiate --add-root "$cachedir/shell-no-hook.drv" --indirect -E "let shell = import ./shell.nix; in shell.overrideAttrs (_: { shellHook =''$bashEscapedShellHook''; })" > /dev/null

    # Sed-escaping taken from https://stackoverflow.com/a/2705678. I hope it works.
    # local sedEscapedCommentedShellHook=$(printf '%s\n' "$commentedShellHook" | sed -e 's/[]\/$*.^[]/\\&/g');
    # echo "$sedEscapedCommentedShellHook"
    # sed -E "s/\(\"shellHook\",\"(\\\"|[^\"])*\"\),/\(\"shellHook\",\"$sedEscapedCommentedShellHook\"),/" "$cachedir/shell.drv" > "$cachedir/shell-no-hook.drv"
    
    nix-shell --pure --run "$direnv dump bash > $cachedir/direnv_bash_dump.sh" "$cachedir/shell-no-hook.drv"
fi

# Source cached environment and treat some environment variables
# especially.
local user_path="${PATH:-}"
local user_xdg_data_dirs="${XDG_DATA_DIRS:-}"

source "$cachedir/direnv_bash_dump.sh"
source "$cachedir/shellHook.sh"

export PATH="$PATH:$user_path"
export XDG_DATA_DIRS="${XDG_DATA_DIRS:-}:$user_xdg_data_dirs"
export IN_NIX_SHELL="impure"

for f in "${files_to_watch[@]}"
do
    watch_file "$f"
done